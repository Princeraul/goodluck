/*
SCSS variables are information about icon's compiled state, stored under its original file name

.icon-home {
  width: $icon-home-width;
}

The large array-like variables contain all information about a single icon
$icon-home: x y offset_x offset_y width height total_width total_height image_path;

At the bottom of this section, we provide information about the spritesheet itself
$spritesheet: width height image $spritesheet-sprites;
*/
$cpcs-name: 'cpcs';
$cpcs-x: 258px;
$cpcs-y: 61px;
$cpcs-offset-x: -258px;
$cpcs-offset-y: -61px;
$cpcs-width: 133px;
$cpcs-height: 31px;
$cpcs-total-width: 446px;
$cpcs-total-height: 189px;
$cpcs-image: '../images/sprite.png';
$cpcs: (258px, 61px, -258px, -61px, 133px, 31px, 446px, 189px, '../images/sprite.png', 'cpcs', );
$fwsy-name: 'fwsy';
$fwsy-x: 0px;
$fwsy-y: 160px;
$fwsy-offset-x: 0px;
$fwsy-offset-y: -160px;
$fwsy-width: 137px;
$fwsy-height: 29px;
$fwsy-total-width: 446px;
$fwsy-total-height: 189px;
$fwsy-image: '../images/sprite.png';
$fwsy: (0px, 160px, 0px, -160px, 137px, 29px, 446px, 189px, '../images/sprite.png', 'fwsy', );
$product-bg-name: 'product-bg';
$product-bg-x: 0px;
$product-bg-y: 61px;
$product-bg-offset-x: 0px;
$product-bg-offset-y: -61px;
$product-bg-width: 238px;
$product-bg-height: 79px;
$product-bg-total-width: 446px;
$product-bg-total-height: 189px;
$product-bg-image: '../images/sprite.png';
$product-bg: (0px, 61px, 0px, -61px, 238px, 79px, 446px, 189px, '../images/sprite.png', 'product-bg', );
$qyjs-name: 'qyjs';
$qyjs-x: 157px;
$qyjs-y: 160px;
$qyjs-offset-x: -157px;
$qyjs-offset-y: -160px;
$qyjs-width: 136px;
$qyjs-height: 29px;
$qyjs-total-width: 446px;
$qyjs-total-height: 189px;
$qyjs-image: '../images/sprite.png';
$qyjs: (157px, 160px, -157px, -160px, 136px, 29px, 446px, 189px, '../images/sprite.png', 'qyjs', );
$title-name: 'title';
$title-x: 0px;
$title-y: 0px;
$title-offset-x: 0px;
$title-offset-y: 0px;
$title-width: 446px;
$title-height: 41px;
$title-total-width: 446px;
$title-total-height: 189px;
$title-image: '../images/sprite.png';
$title: (0px, 0px, 0px, 0px, 446px, 41px, 446px, 189px, '../images/sprite.png', 'title', );
$spritesheet-width: 446px;
$spritesheet-height: 189px;
$spritesheet-image: '../images/sprite.png';
$spritesheet-sprites: ($cpcs, $fwsy, $product-bg, $qyjs, $title, );
$spritesheet: (446px, 189px, '../images/sprite.png', $spritesheet-sprites, );

/*
The provided mixins are intended to be used with the array-like variables

.icon-home {
  @include sprite-width($icon-home);
}

.icon-email {
  @include sprite($icon-email);
}

Example usage in HTML:

`display: block` sprite:
<div class="icon-home"></div>

To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:

// CSS
.icon {
  display: inline-block;
}

// HTML
<i class="icon icon-home"></i>
*/
@mixin sprite-width($sprite) {
  width: nth($sprite, 5);
}

@mixin sprite-height($sprite) {
  height: nth($sprite, 6);
}

@mixin sprite-position($sprite) {
  $sprite-offset-x: nth($sprite, 3);
  $sprite-offset-y: nth($sprite, 4);
  background-position: $sprite-offset-x  $sprite-offset-y;
}

@mixin sprite-image($sprite) {
  $sprite-image: nth($sprite, 9);
  background-image: url(#{$sprite-image});
}

@mixin sprite($sprite) {
  @include sprite-image($sprite);
  @include sprite-position($sprite);
  @include sprite-width($sprite);
  @include sprite-height($sprite);
}

/*
The `sprites` mixin generates identical output to the CSS template
  but can be overridden inside of SCSS

@include sprites($spritesheet-sprites);
*/
@mixin sprites($sprites) {
  @each $sprite in $sprites {
    $sprite-name: nth($sprite, 10);
    .#{$sprite-name} {
      @include sprite($sprite);
    }
  }
}
